#!/usr/bin/env php
<?php
// use PDO;
// use kibalanga\core\Database;
// use kibalanga\databases\Migration;
require "config/app.php";

$commands = [
'
| => make:Controller' => ' Create a new controller with Model',
    'migrate' => 'Migrate Tables from Sqlite to Mysql Database',
    '| => serve' => ' Start the PHP development server',
    '| => help' => ' Lists available command',
    '| => dev' => ' Developer Contact',
    '| => run:installer' => 'Install all required.
|
----------------------------------------------------------------------->'
];

$command = $argv[1] ?? 'help';

switch ($command) {
    case 'make:controller':
        createController($argv[2]);
        break;

    case "migrate":
        makemigration();
        break;

    case "make:model":
        createModel($argv[2]);
        break;
    
    case 'serve':
        StartServer();
        break;

    case 'dev':
        dev();
        break;
    
    case 'make:view':
        createView($argv[2]);
        break;

    case 'run:installer':
        installer();
        break;
    
    case 'help':
    default:
        showHelp();
        break;
}

function makemigration() {
    $host = DB_HOST;
    $db_name = DB_NAME;
    $username = DB_USER;
    $password = DB_PASSWORD;
        
        try {
            $sqlite = new PDO("sqlite:databases/database.sqlite");
            $sqlite->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            // return $sqlite;

            $mysql = new PDO("mysql:host=" . $host . ";dbname=" . $db_name, $username, $password);
            $mysql->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
            // Fetch all tables in the SQLite database
            // $tablesQuery = $sqlite->query("SELECT * FROM jobs WHERE type='table' AND name NOT LIKE 'sqlite_%'");
            $tablesQuery = $sqlite->query("SELECT * FROM jobs");
            $tables = $tablesQuery->fetchAll(PDO::FETCH_ASSOC);
            // $tables = $tablesQuery->fetchAll(PDO::FETCH_COLUMN);
        
            if (empty($tables)) {
                echo "No tables found in the SQLite database.\n";
            }
        
            foreach ($tables as $table) {
                echo "Migrating table: $table...\n";
        
                // Get table structure from SQLite
                // $createTableQuery = $sqlite->query("SELECT * FROM jobs WHERE type='table' AND name='$table'")->fetch(PDO::FETCH_COLUMN);
                $createTableQuery = $sqlite->query("SELECT * FROM jobs ")->fetch(PDO::FETCH_COLUMN);
                if (!$createTableQuery) {
                    echo "Failed to get structure for table: $table. Skipping...\n";
                    continue;
                }
        
                // Modify the SQLite CREATE TABLE query for MySQL compatibility
                $createTableQuery = preg_replace('/"([^"]+)"/', '`$1`', $createTableQuery); // Replace double quotes with backticks
                $createTableQuery = str_replace('AUTOINCREMENT', 'AUTO_INCREMENT', $createTableQuery); // Replace AUTOINCREMENT
                $createTableQuery = str_replace('INTEGER PRIMARY KEY', 'INT PRIMARY KEY AUTO_INCREMENT', $createTableQuery); // Adjust primary key syntax
        
                // Create the table in MySQL
                $mysql->exec($createTableQuery);
                echo "Table $table created in MySQL.\n";
        
                // Fetch all data from the SQLite table
                $data = $sqlite->query("SELECT * FROM $table")->fetchAll(PDO::FETCH_ASSOC);
        
                if (!empty($data)) {
                    // Get column names
                    $columns = array_keys($data[0]);
                    $columnsList = implode(',', array_map(fn($col) => "`$col`", $columns));
                    $placeholders = implode(',', array_fill(0, count($columns), '?'));
        
                    // Prepare MySQL INSERT statement
                    $insertQuery = "INSERT INTO `$table` ($columnsList) VALUES ($placeholders)";
                    $stmt = $mysql->prepare($insertQuery);
        
                    // Insert data into MySQL table
                    foreach ($data as $row) {
                        $stmt->execute(array_values($row));
                    }
        
                    echo "Data migrated for table: $table.\n";
                } else {
                    echo "No data found for table: $table. Skipping data migration.\n";
                }
            }
        
            echo "Migration completed successfully!\n";
        
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage() . "\n";
        }
    }
// }

function installer() {
    
    $app_key = bin2hex(random_bytes(15)); //app_key(15);
    $tempSession = bin2hex(random_bytes(15)); //app_key(6);
    
    try {
        $db = new PDO("sqlite:databases/database.sqlite");
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
        $QUERI = "
        CREATE TABLE IF NOT EXISTS jobs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            app_key TEXT NOT NULL,
            tempsession TEXT NOT NULL,
            created_at DATATIME DEFAULT CURRENT_TIMESTAMP
        );
        ";

        $db->exec($QUERI);
    
        if ($QUERI) {
            echo '--------------------------------->
|   configuration complete!
--------------------------------->';
            echo '\n\n';
        }
    
        $sql = "INSERT INTO `jobs` (app_key, tempsession) VALUES (:appkey, :tempsession)";
        $stmt = $db->prepare($sql);

        if ($stmt->execute(['appkey' => $app_key, 'tempsession' => $tempSession])) {
            echo '--------------------------------->
|   App key created successful!
--------------------------------->';
            echo "\n\n";
        }
    
    } catch (PDOException $e) {
        echo $e->getMessage();
    }
    
    // tr
    $envexample = ".env.example";
    $envTemplate = '#APP INFO
APP_NAME=SAM OCHU
APP_ENV=loacal
APP_KEY='.$app_key.'
APP_URL=http://localhost:8080

#DATABASE INFO
DATABASE=mysql 
DB_HOST=127.0.0.1
DB_NAME=sam
DB_USER=root
DB_PASSWORD=

DEV=SAM TECHNOLOGY';
    // caniuse-lite is outdated. Please run: npx update-browserslist-db@latest
    
    $envna = ".env";
    file_put_contents($envna, $envTemplate);
    file_put_contents($envexample, $envTemplate);
    echo '
     ---------------------------------
    |        Env file created.        |
     ---------------------------------
    ';
    
    // exec("composer init");
    // exec("composer install");
    echo '
    
     -------------------------------------
    |                                     |
    | installation Complete. happy coding |
    |                                     |
     -------------------------------------
    ';
}

function createController($name) {
    if (!$name) {
        echo "Please specify a controller name.\n";
    }
    $slasher = trim('\sam', "sam");
    $date = date('H:i:s');
    $filname = "App/Controller/{$name}Controller.php";
    $template = '<?php
namespace kibalanga\App\Controller;

use kibalanga\App\Model'. $slasher . $name.';
use kibalanga\core\Redirect;

class '.$name.'Controller 
{ 
    //  
    public function index() 
    { 
        //  
    } 

    public function readone($request) 
    { 
        $'.$name.' = new '.$name.'(); 

        $id = $request["id"];
        $result = $'.$name.'->read($id); 
        // user info 
        return $result; 
         
    } 

    public function readAll() 
    { 
        $user = new '.$name.'(); 
        $users = $user->readAll();
        return $users;
    } 


    public function create($request) 
    { 
        $'.$name.' = new '.$name.'();

        $name = $request["name"]; 
        $description = $request["description"]; 
        $extra = $request["extra"]; 

        $result = $'.$name.'->create($name, $description, $extra); 

        if ($result["status"] == "success") {
           Redirect::to("home"); // path of your destine
        }
    }

    public function update($request) 
    {
        $'.$name.' = new '.$name.'();

        $name = $request["item1"];
        $email = $request["item2"];
        $password = $request["item3"];

        $result = $'.$name.'->update($name, $email, $password);

        if ($result["status"] == "success") {
           Redirect::to("home"); // path of your destine
        }
        return $result["message"];
    }
    
    public function delete($request)
    {
        $'.$name.' = new '.$name.'();

        $delete = $request["id"];

        $result = $'.$name.'->delete($delete);

        if ($result["status"] == "success") {
           return $request["message"];
        }
        return $result["message"];
    }
}
';
    $model = "App/Model/".$name.".php";
    $mtamplate = '<?php
namespace kibalanga\App\Model;
    
use kibalanga\core\Model;

class '. $name .' 
{
    public function read($id) 
    {
        $sql = "SELECT * FROM `'.$name.'s` WHERE id=:id";
        $parameter = [":uid" => $id];
        $result = Model::moja($sql, $parameter);

        if (isset($result["status"]) && $result["status"] == "success") {
            return $result["data"];
        }

        return $result["message"] ?? "An error occurred";
    }

    public function readAll()
    {
        $sql = "SELECT * FROM `'.$name.'s`";
        $result = Model::somazote($sql);

        if (isset($result["status"]) && $result["status"] == "success") {
            return $result["data"];
        }

        return $result["message"] ?? "An error occurred";
    }

    public function create($name, $email, $password)
    {
        // Validate email
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return "Invalid email address";
        }

        $sql = "SELECT * FROM `'.$name.'s` WHERE email=:email";
        $parameter = [":email" => $email];
        $result = Model::moja($sql, $parameter);

        if (isset($result["status"]) && $result["status"] !== "success") {
            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
            $sql = "INSERT INTO `'.$name.'s` (username, email, password, token) VALUES (:username, :email, :password, :token)";
            $token = uniqid() . bin2hex(random_bytes(4));
            $parameter = [":username" => $name, ":email" => $email, ":password" => $hashedPassword, ":token" => $token];
            $result = Model::moja($sql, $parameter);

            return $result["status"] == "success" ? "User created successfully!" : $result["message"];
        }

        return "Email is already taken!";
    }

    public function update($id, $name, $email)
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return "Invalid email address";
        }
        
        $sql = "UPDATE `'.$name.'s` SET username=:name, email=:email WHERE token=:id";
        $parameter = [":name" => $name, ":email" => $email, ":id" => $id];
        $result = Model::badili($sql, $parameter);

        return $result["status"] == "success" ? "Update successful!" : $result["message"];
    }

    public function delete($id)
    {
        $sql = "DELETE FROM `'.$name.'s` WHERE token=:id";
        $parameter = [":id" => $id];
        $result = Model::futa($sql, $parameter);

        return $result["status"] == "success" ? "User deleted successfully!" : $result["message"];
    }
}
    
';
    file_put_contents($filname, $template);
    echo '
    -------------------------------------------------->
   |                                                  |
   | Controller '.$name.' Created at '.$date.'            
   |                                                  |
    -------------------------------------------------->
    ';
    file_put_contents($model, $mtamplate);
    echo '
    -------------------------------------------------->
   |                                                  |
   | Model '.$name.' Created at '.$date.'            
   |                                                  |
    -------------------------------------------------->
    ';
}

function dev () {
    echo '
     --------------------------
    |                          |
    | Whatsapp +255780771116   |
    |                          |
     --------------------------
    ';

    $linkL = "xdg-open https://wa.me/255780771116";
    $linkW = "start https://wa.me/255780771116";
    $linkM = "open https://wa.me/255780771116";
    
    if (PHP_OS_FAMILY === "Linux") {
        exec($linkL);
    } elseif (PHP_OS_FAMILY === "Windows") {
        exec($linkW);
    } elseif (PHP_OS_FAMILY === "Darwin") {
        exec($linkM);
    }
}

function StartServer() {
    echo '
----------------------------------------------------->
|
|  Start Development server at http://localhost:8080
|
----------------------------------------------------->
';
    $linkL = "xdg-open http://localhost:8080";
    $linkW = "start http://localhost:8080";
    $linkM = "open http://localhost:8080";
    
    if (PHP_OS_FAMILY === "Linux") {
        exec($linkL);
    } elseif (PHP_OS_FAMILY === "Windows") {
        exec($linkW);
    } elseif (PHP_OS_FAMILY === "Darwin") {
        exec($linkM);
    }
    exec("php -S localhost:8080");
}

function showHelp() {
    global $commands;
    echo '
    
------------------> Kibalanga CLI - Available commands: <---------------';
    foreach($commands as $cmd => $desc) {
        echo "$cmd - $desc\n";
    }
}

function createModel($name) {
    $date = date('H:i:s');
    $template = '<?php
namespace kibalanga\App\Model;

use kibalanga\core\Model;

class User 
{
    public function read($id) 
    {
        $sql = "SELECT * FROM `users` WHERE uid=:uid";
        $parameter = [":uid" => $id];
        $result = Model::moja($sql, $parameter);

        if (isset($result["status"]) && $result["status"] == "success") {
            return $result["data"];
        }

        return $result["message"] ?? "An error occurred";
    }

    public function readAll()
    {
        $sql = "SELECT * FROM `users`";
        $result = Model::somazote($sql);

        if (isset($result["status"]) && $result["status"] == "success") {
            return $result["data"];
        }

        return $result["message"] ?? "An error occurred";
    }

    public function login($email, $password)
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return "Invalid email address";
        }

        $sql = "SELECT * FROM `users` WHERE email=:email";
        $parameter = [":email" => $email];
        $result = Model::moja($sql, $parameter);

        if ($result["status"] == "success") {
            $sql = "SELECT * FROM `users` WHERE email=:email";
            $parameter = [":email" => $email];
            $result = Model::moja($sql, $parameter);
    
            if ($result["status"] == "success") {
                $user = $result["data"];
                
                if (password_verify($password, $user["password"])) {
                    return $user["token"];
                } else {
                    return "Invalid password!";
                }
            } else {
                return "Invalid email!";
            }
        }
    }

    public function create($name, $email, $password)
    {
        // Validate email
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return "Invalid email address";
        }

        $sql = "SELECT * FROM `users` WHERE email=:email";
        $parameter = [":email" => $email];
        $result = Model::moja($sql, $parameter);

        if (isset($result["status"]) && $result["status"] !== "success") {
            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
            $sql = "INSERT INTO `users` (username, email, password, token) VALUES (:username, :email, :password, :token)";
            $token = uniqid() . bin2hex(random_bytes(4));
            $parameter = [":username" => $name, ":email" => $email, ":password" => $hashedPassword, ":token" => $token];
            $result = Model::moja($sql, $parameter);

            return $result["status"] == "success" ? "User created successfully!" : $result["message"];
        }

        return "Email is already taken!";
    }

    public function update($id, $name, $email)
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return "Invalid email address";
        }
        
        $sql = "UPDATE `users` SET username=:name, email=:email WHERE token=:id";
        $parameter = [":name" => $name, ":email" => $email, ":id" => $id];
        $result = Model::badili($sql, $parameter);

        return $result["status"] == "success" ? "Update successful!" : $result["message"];
    }

    public function delete($id)
    {
        $sql = "DELETE FROM `users` WHERE token=:id";
        $parameter = [":id" => $id];
        $result = Model::futa($sql, $parameter);

        return $result["status"] == "success" ? "User deleted successfully!" : $result["message"];
    }
}
';
    $filname = "App/Model/{$name}.php";
    file_put_contents($filname, $template);
    echo "-------------------------------------------
    |
    |   Model {$name} created at {$date}\n
    |
    -------------------------------------------";
}

function createView($name) {
    $filname = "views/{$name}.sam.php";
    $jinapage = trim($name, '/');
    $template = '
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>'.$jinapage.' | <?php echo APP_NAME; ?></title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/css/all.min.css">
    <link rel="stylesheet" href="assets/css/userform.css">
    <link rel="stylesheet" href="assets/css/app.css">
</head>
<body>
    <h1>This is '.$jinapage.' page.</h1>
</body>
</html>
    ';
    $date = date('H:i:s');
    file_put_contents($filname, $template);
    echo "-------------------------------------------
|
|   View {$name} created at {$date}
|
-------------------------------------------";
}

?>